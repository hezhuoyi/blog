(self.webpackChunkblog=self.webpackChunkblog||[]).push([[744],{7508:(l,n,e)=>{"use strict";e.r(n),e.d(n,{data:()=>r});const r={key:"v-e731af70",path:"/Network/HTTPS.html",title:"HTTPS",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"HTTP 的缺点",slug:"http-的缺点",children:[]},{level:2,title:"HTTPS",slug:"https-1",children:[{level:3,title:"2.1 HTTPS 是身披 SSL （安全套接层）外壳的 HTTP",slug:"_2-1-https-是身披-ssl-安全套接层-外壳的-http",children:[]},{level:3,title:"2.2 相互交换密钥的公开密钥加密技术",slug:"_2-2-相互交换密钥的公开密钥加密技术",children:[]},{level:3,title:"2.3 证明公开密钥正确性的证书",slug:"_2-3-证明公开密钥正确性的证书",children:[]}]},{level:2,title:"HTTPS的握手过程",slug:"https的握手过程",children:[]},{level:2,title:"HTTP2",slug:"http2",children:[{level:3,title:"二进制分帧",slug:"二进制分帧",children:[]},{level:3,title:"多路复用",slug:"多路复用",children:[]},{level:3,title:"Header 压缩",slug:"header-压缩",children:[]},{level:3,title:"服务端 Push",slug:"服务端-push",children:[]}]},{level:2,title:"HTTP3",slug:"http3",children:[{level:3,title:"HTTP3的优化",slug:"http3的优化",children:[]},{level:3,title:"HTTP2的缺点",slug:"http2的缺点",children:[]},{level:3,title:"QUIC协议",slug:"quic协议",children:[]}]}],filePathRelative:"Network/HTTPS.md"}},5170:(l,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>bl});var r=e(6252);const m=e.p+"assets/img/http3.e72f0a57.png",t=(0,r.Wm)("h1",{id:"https",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#https","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTPS")],-1),a=(0,r.Wm)("h2",{id:"http-的缺点",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#http-的缺点","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTP 的缺点")],-1),u=(0,r.Wm)("p",null,"HTTP 在通信过程中会面临以下三种安全问题：",-1),W=(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,"通信使用明文（不加密），内容可能会被窃听。"),(0,r.Wm)("li",null,"不验证通信方的身份，可能会遭遇伪装。"),(0,r.Wm)("li",null,"无法验证报文的完整性，可能已经被篡改。")],-1),s=(0,r.Wm)("h2",{id:"https-1",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#https-1","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTPS")],-1),i=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。")],-1),h=(0,r.Wm)("p",null,"HTTPS = HTTP + 加密 + 认证 + 摘要",-1),T=(0,r.Wm)("h3",{id:"_2-1-https-是身披-ssl-安全套接层-外壳的-http",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#_2-1-https-是身披-ssl-安全套接层-外壳的-http","aria-hidden":"true"},"#"),(0,r.Uk)(" 2.1 HTTPS 是身披 SSL （安全套接层）外壳的 HTTP")],-1),d=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"SSL和TLS(安全传输层协议)都是加密协议"),(0,r.Uk)("。")],-1),p=(0,r.Wm)("p",null,"HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL 和 TLS 协议代替而已。",-1),c=(0,r.Wm)("p",null,"通常，HTTP 直接和 TCP 通信。当使用 SSL 的时候，就先和 SSL 通信，再由 SSL 和 TCP 通信了。所以简而言之，HTTPS 就是身披 SSL 外壳的 HTTP 协议。",-1),P=(0,r.Wm)("h3",{id:"_2-2-相互交换密钥的公开密钥加密技术",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#_2-2-相互交换密钥的公开密钥加密技术","aria-hidden":"true"},"#"),(0,r.Uk)(" 2.2 相互交换密钥的公开密钥加密技术")],-1),o=(0,r.Wm)("div",{class:"language-text ext-text line-numbers-mode"},[(0,r.Wm)("pre",{class:"language-text"},[(0,r.Wm)("code",null,"HTTPS 为什么同时要有对称加密和非对称加密两种加密方式？ 对称加密的密钥 => SK\n1). 首先一定要明确HTTPS既有对称加密，又有非对称加密。\n2).由于对称加密性能高速度快，因此在传输数据时（也就是对话内容）采用对称加密。\n3).但是对称加密的密钥SK，既没办法预先设置（密钥不可能只有一把，服务器端维护大量密钥也不具备可行性），因此只能选择在对话前通过网络协商出一把新的SK。\n4). 为了确保SK的传输安全，使用非对称加密来协商SK。\n\nHTTPS 对称加密的密钥 SK 如何产生和传输？\n通过第一个问题，我们知道了 HTTPS 分为2 个过程：\n1.协商对称加密密钥 SK 的非对称加密阶段，称为TLS 握手阶段。\n2.使用 SK 对数据（对话内容）进行对称加密的阶段，称为数据通信阶段。\n\n过程 1TLS 握手阶段：协商密钥 SK。\n基于非对称加密算法\n基于专用密钥交换算法，常见有 DH、ECDH 等\n基于共享的 secret，常见有 PSK，SRP 等\n过程 2数据通信阶段：发送端首先用密钥 SK 对通信内容进行对称加密，接着通过网络传输出去；对端收到数据后，用 SK 先将数据解密，于是就得到了通信内容\n")]),(0,r.Wm)("div",{class:"line-numbers"},[(0,r.Wm)("span",{class:"line-number"},"1"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"2"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"3"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"4"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"5"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"6"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"7"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"8"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"9"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"10"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"11"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"12"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"13"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"14"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"15"),(0,r.Wm)("br"),(0,r.Wm)("span",{class:"line-number"},"16"),(0,r.Wm)("br")])],-1),U=(0,r.Wm)("h4",{id:"_2-2-1-共享密钥加密的困境",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#_2-2-1-共享密钥加密的困境","aria-hidden":"true"},"#"),(0,r.Uk)(" 2.2.1 共享密钥加密的困境")],-1),k=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"加密和解密使用同一个密钥的方式称为共享密钥加密（Common key crypto system），也被叫做对称密钥加密"),(0,r.Uk)("。")],-1),H=(0,r.Wm)("p",null,[(0,r.Uk)("采用共享密钥加密方式加密时，需要将密钥一起发送给通信方，所以有需要考虑密钥传输的安全性，需要"),(0,r.Wm)("strong",null,"设法安全地保管密钥"),(0,r.Uk)("，这便是共享密钥加密方式的困扰。")],-1),S=(0,r.Wm)("h4",{id:"_2-2-2-使用两把密钥加密的公开密钥加密方式",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#_2-2-2-使用两把密钥加密的公开密钥加密方式","aria-hidden":"true"},"#"),(0,r.Uk)(" 2.2.2 使用两把密钥加密的公开密钥加密方式")],-1),g=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"公开密钥加密方式"),(0,r.Uk)("很好的解决了共享密钥加密方式的困扰。")],-1),b=(0,r.Wm)("p",null,[(0,r.Uk)("公开密钥加密使用一对"),(0,r.Wm)("strong",null,"非对称的密钥"),(0,r.Uk)("。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思义，私有密钥不能被其他任何人知道，而公开密钥则可以任意传播，任何人都可以拿到。")],-1),C=(0,r.Wm)("p",null,[(0,r.Uk)("使用公开密钥加密方式（非对称加密），发送密文的一方使用公钥进行加密处理，而接收方拿到被加密后的信息之后再使用自己的私钥进行解密。利用这种方式进行传输，就"),(0,r.Wm)("strong",null,"不需要发送密钥，也就不用担心密钥被攻击者拿走了"),(0,r.Uk)("。")],-1),f=(0,r.Wm)("h4",{id:"_2-2-3-https-采用混合加密机制",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#_2-2-3-https-采用混合加密机制","aria-hidden":"true"},"#"),(0,r.Uk)(" 2.2.3 HTTPS 采用混合加密机制")],-1),x=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"HTTPS 采用共享密钥加密方式和公开密钥加密方式混用的加密方式"),(0,r.Uk)("。")],-1),v=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"HTTPS 在内容传输的加密上使用的是对称加密，非对称加密只作用在证书验证阶段。")],-1),L=(0,r.Wm)("p",null,[(0,r.Uk)("如果密钥可以被安全传输，则 HTTPS 会考虑采用共享密钥加密方式，否则将采用公开密钥加密方式。这是因为公开密钥加密方式的速度比共享密钥加密方式要慢。HTTPS 充分地利用了两者的优点，将多种方法组合起来用于通信。"),(0,r.Wm)("strong",null,"在使用公开密钥加密方式交换密钥之后，之后的信息传输使用共享密钥加密方式"),(0,r.Uk)("。")],-1),I=(0,r.Wm)("h3",{id:"_2-3-证明公开密钥正确性的证书",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#_2-3-证明公开密钥正确性的证书","aria-hidden":"true"},"#"),(0,r.Uk)(" 2.3 证明公开密钥正确性的证书")],-1),_=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"数字证书用于主体身份验证。"),(0,r.Uk)(),(0,r.Wm)("strong",null,"数字证书=主体信息+数字签名"),(0,r.Uk)("。")],-1),Q=(0,r.Wm)("p",null,"因为无法证明公开密钥本身就是真的公开密钥，由CA(数字证书认证机构)颁发公开密钥证书。",-1),D=(0,r.Wm)("p",null,"下面讲解一下数字证书认证机构的业务流程：",-1),K=(0,r.Wm)("ol",null,[(0,r.Wm)("li",null,[(0,r.Wm)("strong",null,"服务器的运营人员会向数字机构提出公开密钥申请。")]),(0,r.Wm)("li",null,[(0,r.Wm)("strong",null,"CA 在认证申请者的身份信息之后，会对已申请的公开密钥进行数字签名。")]),(0,r.Wm)("li",null,[(0,r.Wm)("strong",null,"然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书之后绑定在一起。")]),(0,r.Wm)("li",null,[(0,r.Wm)("strong",null,"服务器会将这份 CA 颁发的公钥证书发送给客户端，以进行公钥加密方式通信，公钥证书也可叫做数字证书或者直接称为证书。")])],-1),w=(0,r.Wm)("p",null,"接到证书的客户端可使用 CA 的公钥对证书的数字签名进行认证，一旦验证通过，客户端便可确认两件事：",-1),y=(0,r.Wm)("ul",null,[(0,r.Wm)("li",null,"认证服务器公钥的机构是真实有效的 CA 机构"),(0,r.Wm)("li",null,"服务器的公钥是值得信任的")],-1),A=(0,r.Wm)("p",null,"于是这就达到了确认公钥真实有效性的目的。",-1),q=(0,r.Wm)("h2",{id:"https的握手过程",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#https的握手过程","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTPS的握手过程")],-1),R=(0,r.Wm)("p",null,"SSL类似于TCP的三次握手，在HTTP链接建立之前进行四次握手，从而客户度和服务端沟通好HTTP传输时对称加密的密钥，SSL的四次握手其过程如下：",-1),X=(0,r.Wm)("ol",null,[(0,r.Wm)("li",null,[(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"客户端请求建立SSL连接，发送支持的加密方式以及一个随机数client random给服务器；")])]),(0,r.Wm)("li",null,[(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"服务器选择其中的一种加密方式，并且再加上另外一个随机数server random，和数字证书（其中有公钥），发送给客户端；")])]),(0,r.Wm)("li",null,[(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"客户端确认这个数字证书是有效的，并且再生成一个新的随机数，将这个随机数用服务器发送给它的数字证书中的公钥进行加密发送给服务器；")])]),(0,r.Wm)("li",null,[(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"服务器收到客户端的回复，利用自己的私钥进行解密，获得这个随机数，然后通过将前面这三个随机数以及他们协商的加密方式，计算生成一个对称密钥。")])]),(0,r.Wm)("li",null,[(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"至此握手阶段完成，之后的会话他们就通过这个对称密钥进行加密传输。")])])],-1),N=(0,r.Wm)("h2",{id:"http2",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#http2","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTP2")],-1),j=(0,r.Wm)("p",null,"HTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。",-1),z=(0,r.Wm)("p",null,"在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。",-1),E=(0,r.Wm)("h3",{id:"二进制分帧",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#二进制分帧","aria-hidden":"true"},"#"),(0,r.Uk)(" 二进制分帧")],-1),G=(0,r.Wm)("p",null,"帧：HTTP/2 数据通信的最小单位消息：指 HTTP/2 中逻辑上的 HTTP 消息。例如请求和响应等，消息由一个或多个帧组成。",-1),Y=(0,r.Wm)("p",null,"流：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的整数ID。",-1),B=(0,r.Wm)("p",null,[(0,r.Uk)("HTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用"),(0,r.Wm)("strong",null,"二进制格式编码"),(0,r.Uk)("。")],-1),F=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流"),(0,r.Uk)("。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。")],-1),J=(0,r.Wm)("h3",{id:"多路复用",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#多路复用","aria-hidden":"true"},"#"),(0,r.Uk)(" 多路复用")],-1),M=(0,r.Wm)("p",null,[(0,r.Uk)("多路复用，"),(0,r.Wm)("strong",null,"就是在一个 TCP 连接中可以存在多条流"),(0,r.Uk)("。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。")],-1),O=(0,r.Wm)("h3",{id:"header-压缩",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#header-压缩","aria-hidden":"true"},"#"),(0,r.Uk)(" Header 压缩")],-1),V=(0,r.Wm)("p",null,"在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。",-1),Z=(0,r.Wm)("p",null,[(0,r.Uk)("在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在"),(0,r.Wm)("strong",null,"两端维护了索引表"),(0,r.Uk)("，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。")],-1),$=(0,r.Wm)("h3",{id:"服务端-push",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#服务端-push","aria-hidden":"true"},"#"),(0,r.Uk)(" 服务端 Push")],-1),ll=(0,r.Wm)("p",null,"在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。",-1),nl=(0,r.Wm)("p",null,[(0,r.Uk)("可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，"),(0,r.Wm)("strong",null,"提前给客户端推送必要的资源"),(0,r.Uk)("，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。")],-1),el=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"流的特性")],-1),rl=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"并发性"),(0,r.Uk)("。一个 HTTP/2 连接上可以同时发多个帧，这一点和 HTTP/1 不同。这也是实现"),(0,r.Wm)("strong",null,"多路复用"),(0,r.Uk)("的基础。")],-1),ml=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"自增性"),(0,r.Uk)("。流 ID 是不可重用的，而是会按顺序递增，达到上限之后又新开 TCP 连接从头开始。")],-1),tl=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"双向性"),(0,r.Uk)("。客户端和服务端都可以创建流，互不干扰，双方都可以作为"),(0,r.Wm)("code",null,"发送方"),(0,r.Uk)("或者"),(0,r.Wm)("code",null,"接收方"),(0,r.Uk)("。")],-1),al=(0,r.Wm)("p",null,[(0,r.Wm)("strong",null,"可设置优先级"),(0,r.Uk)("。可以设置数据帧的优先级，让服务端先处理重要资源，优化用户体验。")],-1),ul=(0,r.Wm)("h2",{id:"http3",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#http3","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTP3")],-1),Wl=(0,r.Wm)("h3",{id:"http3的优化",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#http3的优化","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTP3的优化")],-1),sl=(0,r.Wm)("p",null,[(0,r.Wm)("img",{src:m,alt:"http3"})],-1),il=(0,r.Wm)("h3",{id:"http2的缺点",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#http2的缺点","aria-hidden":"true"},"#"),(0,r.Uk)(" HTTP2的缺点")],-1),hl=(0,r.Wm)("p",null,"虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。HTTP/2的缺点主要有以下几点：",-1),Tl=(0,r.Wm)("ol",null,[(0,r.Wm)("li",null,"TCP 以及 TCP+TLS建立连接的延时"),(0,r.Wm)("li",null,"TCP的队头阻塞并没有彻底解决")],-1),dl=(0,r.Wm)("h3",{id:"quic协议",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#quic协议","aria-hidden":"true"},"#"),(0,r.Uk)(" QUIC协议")],-1),pl=(0,r.Wm)("p",null,[(0,r.Uk)("QUIC 协议选择了 UDP，因为 UDP 本身没有连接的概念，"),(0,r.Wm)("strong",null,"不需要三次握手，优化了连接建立的握手延迟"),(0,r.Uk)("，同时在应用程序层面实现了 TCP 的可靠性，TLS 的安全性和 HTTP2 的并发性，只需要用户端和服务端的应用程序支持 QUIC 协议，完全避开了操作系统和中间设备的限制。")],-1),cl=(0,r.Wm)("p",null,"运行在 QUIC 之上的 HTTP 协议被称为 HTTP/3(HTTP-over-QUIC)",-1),Pl=(0,r.Wm)("p",null,[(0,r.Uk)("QUIC 协议(Quick UDP Internet Connection)基于 UDP，正是看中了 "),(0,r.Wm)("strong",null,"UDP 的速度与效率"),(0,r.Uk)("。同时 QUIC 也整合了 TCP、TLS 和 HTTP/2 的优点，并加以优化。")],-1),ol=(0,r.Wm)("p",null,"特点:",-1),Ul=(0,r.Wm)("ol",null,[(0,r.Wm)("li",null,"减少了握手的延迟(1-RTT 或 0-RTT)"),(0,r.Wm)("li",null,"多路复用，并且没有 TCP 的阻塞问题"),(0,r.Wm)("li",null,"连接迁移，(主要是在客户端)当由 Wifi 转移到 4G 时，连接不会被断开。")],-1),kl=(0,r.Wm)("p",null,"QUIC 解决队头阻塞问题的方法：",-1),Hl=(0,r.Wm)("ol",null,[(0,r.Wm)("li",null,"QUIC 的传输单元是 Packet，加密单元也是 Packet，整个加密、传输、解密都基于 Packet，这样就能避免 TLS 的队头阻塞问题。"),(0,r.Wm)("li",null,[(0,r.Uk)("QUIC 基于 UDP，UDP 的数据包在接收端"),(0,r.Wm)("strong",null,"没有处理顺序"),(0,r.Uk)("，即使中间丢失一个包，也不会阻塞整条连接，其他的资源会被正常处理。")])],-1),Sl=(0,r.Wm)("h4",{id:"quic-基于-udp-怎么保证可靠性",tabindex:"-1"},[(0,r.Wm)("a",{class:"header-anchor",href:"#quic-基于-udp-怎么保证可靠性","aria-hidden":"true"},"#"),(0,r.Uk)(" QUIC 基于 UDP 怎么保证可靠性？")],-1),gl=(0,r.Wm)("p",null,"TCP 中通过三次握手，给每一份数据包添加序列，以及重试机制，保证可靠性。而 QUIC 在 UDP 的基础上，增加了一层实现 TCP 类似的功能。",-1),bl={render:function(l,n){return(0,r.wg)(),(0,r.j4)(r.HY,null,[t,a,u,W,s,i,h,T,d,p,c,P,o,U,k,H,S,g,b,C,f,x,v,L,I,_,Q,D,K,w,y,A,q,R,X,N,j,z,E,G,Y,B,F,J,M,O,V,Z,$,ll,nl,el,rl,ml,tl,al,ul,Wl,sl,il,hl,Tl,dl,pl,cl,Pl,ol,Ul,kl,Hl,Sl,gl],64)}}}}]);