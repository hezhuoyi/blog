(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4335],{3507:(e,n,l)=>{"use strict";l.r(n),l.d(n,{data:()=>o});const o={key:"v-4761ff02",path:"/Framework/Vue/Vue%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",title:"Vue实现原理",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Vue 编译过程",slug:"vue-编译过程",children:[]},{level:2,title:"Vue DOM-Diff(patch) 过程",slug:"vue-dom-diff-patch-过程",children:[]},{level:2,title:"diff算法原理（三步）",slug:"diff算法原理-三步",children:[{level:3,title:"vue3 diff算法 双端对比的基础上改进",slug:"vue3-diff算法-双端对比的基础上改进",children:[]}]}],filePathRelative:"Framework/Vue/Vue实现原理.md"}},8860:(e,n,l)=>{"use strict";l.r(n),l.d(n,{default:()=>se});var o=l(6252);const d=l.p+"assets/img/vue-compile.01a48956.png",u=l.p+"assets/img/vue-diff1.f4bc4852.png",a=l.p+"assets/img/vue-diff2.2f657a67.png",m=l.p+"assets/img/vue-vnode.d1a7440c.png",t=(0,o.Wm)("h1",{id:"vue实现原理",tabindex:"-1"},[(0,o.Wm)("a",{class:"header-anchor",href:"#vue实现原理","aria-hidden":"true"},"#"),(0,o.Uk)(" Vue实现原理")],-1),s=(0,o.Wm)("h2",{id:"vue-编译过程",tabindex:"-1"},[(0,o.Wm)("a",{class:"header-anchor",href:"#vue-编译过程","aria-hidden":"true"},"#"),(0,o.Uk)(" Vue 编译过程")],-1),c=(0,o.Wm)("p",null,[(0,o.Uk)("一个是 Runtime + Compiler 的，一个是 Runtime only 的，前者是包含编译代码的，可以把编译过程放在运行时做，后者是不包含编译代码的，需要借助 webpack 的 "),(0,o.Wm)("code",null,"vue-loader"),(0,o.Uk)(" 事先把模板编译成 "),(0,o.Wm)("code",null,"render"),(0,o.Uk)("函数。")],-1),W=(0,o.Wm)("p",null,[(0,o.Wm)("img",{src:d,alt:"Vue 编译过程"})],-1),r=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"解析模板字符串生成 AST")],-1),p=(0,o.Wm)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,o.Wm)("pre",{class:"language-javascript"},[(0,o.Wm)("code",null,[(0,o.Wm)("span",{class:"token keyword"},"const"),(0,o.Uk)(" ast "),(0,o.Wm)("span",{class:"token operator"},"="),(0,o.Uk)(),(0,o.Wm)("span",{class:"token function"},"parse"),(0,o.Wm)("span",{class:"token punctuation"},"("),(0,o.Uk)("template"),(0,o.Wm)("span",{class:"token punctuation"},"."),(0,o.Wm)("span",{class:"token function"},"trim"),(0,o.Wm)("span",{class:"token punctuation"},"("),(0,o.Wm)("span",{class:"token punctuation"},")"),(0,o.Wm)("span",{class:"token punctuation"},","),(0,o.Uk)(" options"),(0,o.Wm)("span",{class:"token punctuation"},")"),(0,o.Uk)("\n")])]),(0,o.Wm)("div",{class:"line-numbers"},[(0,o.Wm)("span",{class:"line-number"},"1"),(0,o.Wm)("br")])],-1),i=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"优化语法树")],-1),k=(0,o.Wm)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,o.Wm)("pre",{class:"language-javascript"},[(0,o.Wm)("code",null,[(0,o.Wm)("span",{class:"token function"},"optimize"),(0,o.Wm)("span",{class:"token punctuation"},"("),(0,o.Uk)("ast"),(0,o.Wm)("span",{class:"token punctuation"},","),(0,o.Uk)(" options"),(0,o.Wm)("span",{class:"token punctuation"},")"),(0,o.Uk)("\n")])]),(0,o.Wm)("div",{class:"line-numbers"},[(0,o.Wm)("span",{class:"line-number"},"1"),(0,o.Wm)("br")])],-1),U=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"生成代码")],-1),h=(0,o.Wm)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,o.Wm)("pre",{class:"language-javascript"},[(0,o.Wm)("code",null,[(0,o.Wm)("span",{class:"token keyword"},"const"),(0,o.Uk)(" code "),(0,o.Wm)("span",{class:"token operator"},"="),(0,o.Uk)(),(0,o.Wm)("span",{class:"token function"},"generate"),(0,o.Wm)("span",{class:"token punctuation"},"("),(0,o.Uk)("ast"),(0,o.Wm)("span",{class:"token punctuation"},","),(0,o.Uk)(" options"),(0,o.Wm)("span",{class:"token punctuation"},")"),(0,o.Uk)("\n")])]),(0,o.Wm)("div",{class:"line-numbers"},[(0,o.Wm)("span",{class:"line-number"},"1"),(0,o.Wm)("br")])],-1),V=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"parse")],-1),f=(0,o.Wm)("p",null,"编译过程首先就是对模板做解析，生成 AST，它是一种抽象语法树，是对源代码的抽象语法结构的树状表现形式。在很多编译技术中，如 babel 编译 ES6 的代码都会先生成 AST。",-1),v=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,[(0,o.Wm)("code",null,"parse"),(0,o.Uk)(" 的目标是把 "),(0,o.Wm)("code",null,"template"),(0,o.Uk)(" 模板字符串转换成 AST 树，它是一种用 JavaScript 对象的形式来描述整个模板。那么整个 "),(0,o.Wm)("code",null,"parse"),(0,o.Uk)(" 的过程是利用正则表达式顺序解析模板，当解析到开始标签、闭合标签、文本的时候都会分别执行对应的回调函数，来达到构造 AST 树的目的。")])],-1),g=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"optimize")],-1),N=(0,o.Wm)("p",null,[(0,o.Uk)("（我们的模板并不是所有数据都是响应式的，也有很多数据是首次渲染后就永远不会变化的，那么这部分数据生成的 DOM 也不会变化，我们可以在 "),(0,o.Wm)("code",null,"patch"),(0,o.Uk)(" 的过程跳过对他们的比对。）")],-1),b=(0,o.Wm)("ol",null,[(0,o.Wm)("li",null,[(0,o.Uk)("在"),(0,o.Wm)("code",null,"AST"),(0,o.Uk)("中找出所有静态节点并打上标记；")]),(0,o.Wm)("li",null,[(0,o.Uk)("在"),(0,o.Wm)("code",null,"AST"),(0,o.Uk)("中找出所有静态根节点并打上标记；")])],-1),D=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"就是深度遍历这个 AST 树，去检测它的每一颗子树是不是静态节点，如果是静态节点则它们生成 DOM 永远不需要改变，这对运行时对模板的更新起到极大的优化作用。")],-1),O=(0,o.Wm)("p",null,[(0,o.Uk)("我们通过 "),(0,o.Wm)("code",null,"optimize"),(0,o.Uk)(" 我们把整个 AST 树中的每一个 AST 元素节点标记了 "),(0,o.Wm)("code",null,"static"),(0,o.Uk)(" 和 "),(0,o.Wm)("code",null,"staticRoot"),(0,o.Uk)("，它会影响我们接下来执行代码生成的过程。")],-1),M=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"codegen")],-1),w=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,[(0,o.Uk)("代码生成其实就是根据模板对应的抽象语法树"),(0,o.Wm)("code",null,"AST"),(0,o.Uk)("生成一个render函数供组件挂载时调用，通过调用这个函数就可以得到模板对应的虚拟"),(0,o.Wm)("code",null,"DOM"),(0,o.Uk)("。")])],-1),S=(0,o.Wm)("p",null,"通过这些_c,_v等函数，render函数最后会返回一个VNode节点，在_update的时候，经过patch与之前的VNode节点进行比较，得出差异后将这些差异渲染到真实的DOM上。",-1),E=(0,o.Wm)("h4",{id:"vue中的模板解析和渲染的核心就是-通过类似snabbdom的h-和patch-的函数-先将模板解析成vnode-如果是初次渲染-则通过patch-container-vnode-将vnode渲染至页面-如果是二次渲染-则通过patch-vnode-newvnode-先通过diff算法比较原vnode和newvnode的差异-以最小的代价重新渲染页面。",tabindex:"-1"},[(0,o.Wm)("a",{class:"header-anchor",href:"#vue中的模板解析和渲染的核心就是-通过类似snabbdom的h-和patch-的函数-先将模板解析成vnode-如果是初次渲染-则通过patch-container-vnode-将vnode渲染至页面-如果是二次渲染-则通过patch-vnode-newvnode-先通过diff算法比较原vnode和newvnode的差异-以最小的代价重新渲染页面。","aria-hidden":"true"},"#"),(0,o.Uk)(" vue中的模板解析和渲染的核心就是："),(0,o.Wm)("strong",null,"通过类似snabbdom的h()和patch()的函数，先将模板解析成vnode，如果是初次渲染，则通过patch(container,vnode)将vnode渲染至页面，如果是二次渲染，则通过patch(vnode,newVnode)，先通过Diff算法比较原vnode和newVnode的差异，以最小的代价重新渲染页面。")],-1),x=(0,o.Wm)("h2",{id:"vue-dom-diff-patch-过程",tabindex:"-1"},[(0,o.Wm)("a",{class:"header-anchor",href:"#vue-dom-diff-patch-过程","aria-hidden":"true"},"#"),(0,o.Uk)(" Vue DOM-Diff(patch) 过程")],-1),A=(0,o.Wm)("p",null,[(0,o.Uk)("VNode 是对真实 DOM 的一种抽象描述，它的核心定义无非就几个关键属性，标签名、数据、子节点、键值等，其它属性都是用来扩展 VNode 的灵活性以及实现一些特殊 feature 的。"),(0,o.Wm)("strong",null,"由于 VNode 只是用来映射到真实 DOM 的渲染，不需要包含操作 DOM 的方法，因此它是非常轻量和简单的。")],-1),T=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,[(0,o.Uk)("使用虚拟 "),(0,o.Wm)("code",null,"DOM"),(0,o.Uk)(" 也能使得 "),(0,o.Wm)("code",null,"Vue"),(0,o.Uk)(" 不再依赖于浏览器环境。我们可以很容易的在 "),(0,o.Wm)("code",null,"Broswer"),(0,o.Uk)(" 端或者服务器端操作虚拟 "),(0,o.Wm)("code",null,"DOM"),(0,o.Uk)(", 需要 "),(0,o.Wm)("code",null,"render"),(0,o.Uk)(" 时再将虚拟 "),(0,o.Wm)("code",null,"DOM"),(0,o.Uk)(" 转换为真实 "),(0,o.Wm)("code",null,"DOM"),(0,o.Uk)(" 即可。这也使得 "),(0,o.Wm)("code",null,"Vue"),(0,o.Uk)(" 有了实现服务器端渲染的能力。")])],-1),j=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,[(0,o.Uk)("所有 Vue 的组件的渲染最终都需要 "),(0,o.Wm)("code",null,"render"),(0,o.Uk)(" 方法，将el或template转换成render（）是调用 "),(0,o.Wm)("code",null,"compileToFunctions"),(0,o.Uk)(" 方法，之后在mounted钩子中调用_render，"),(0,o.Wm)("code",null,"_render"),(0,o.Uk)(" 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 Node，render会调用后面的createElement。")])],-1),y=(0,o.Wm)("p",null,"Virtual DOM 除了它的数据结构的定义，映射到真实的 DOM 实际上要经历 VNode 的 create、diff、patch 等过程。",-1),F=(0,o.Wm)("p",null,[(0,o.Uk)("create：每个 VNode 有 "),(0,o.Wm)("code",null,"children"),(0,o.Uk)("，"),(0,o.Wm)("code",null,"children"),(0,o.Uk)(" 每个元素也是一个 VNode，这样就形成了一个 VNode Tree")],-1),_=(0,o.Wm)("p",null,"update：VNode 渲染成一个真实的 DOM 一次是首次渲染，一个是数据更新的时候 主要靠patch实现",-1),z=(0,o.Wm)("p",null,[(0,o.Wm)("code",null,"patch"),(0,o.Uk)(" 是平台相关的，在 Web 和 Weex 环境，它们把虚拟 DOM 映射到 “平台 DOM” 的方法是不同的")],-1),C=(0,o.Wm)("p",null,"最终是调用原生 DOM 的 API 进行 DOM 操作。",-1),P=(0,o.Wm)("p",null,"patch只做三件事：",-1),R=(0,o.Wm)("ul",null,[(0,o.Wm)("li",null,[(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,[(0,o.Uk)("创建节点：新的"),(0,o.Wm)("code",null,"VNode"),(0,o.Uk)("中有而旧的"),(0,o.Wm)("code",null,"oldVNode"),(0,o.Uk)("中没有，就在旧的"),(0,o.Wm)("code",null,"oldVNode"),(0,o.Uk)("中创建。")])])]),(0,o.Wm)("li",null,[(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,[(0,o.Uk)("删除节点：新的"),(0,o.Wm)("code",null,"VNode"),(0,o.Uk)("中没有而旧的"),(0,o.Wm)("code",null,"oldVNode"),(0,o.Uk)("中有，就从旧的"),(0,o.Wm)("code",null,"oldVNode"),(0,o.Uk)("中删除。")])])]),(0,o.Wm)("li",null,[(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,[(0,o.Uk)("更新节点：新的"),(0,o.Wm)("code",null,"VNode"),(0,o.Uk)("和旧的"),(0,o.Wm)("code",null,"oldVNode"),(0,o.Uk)("中都有，就以新的"),(0,o.Wm)("code",null,"VNode"),(0,o.Uk)("为准，更新旧的"),(0,o.Wm)("code",null,"oldVNode"),(0,o.Uk)("。")])])])],-1),B=(0,o.Wm)("p",null,[(0,o.Uk)("如果新旧"),(0,o.Wm)("code",null,"VNode"),(0,o.Uk)("里都包含了子节点，那么对于子节点的更新在代码里调用了"),(0,o.Wm)("code",null,"updateChildren"),(0,o.Uk)("方法(diff核心)")],-1),I=(0,o.Wm)("p",null,[(0,o.Wm)("img",{src:u,alt:"vue-diff1"})],-1),H=(0,o.Wm)("p",null,[(0,o.Wm)("img",{src:a,alt:"vue-diff2"})],-1),J=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"优先处理特殊场景"),(0,o.Uk)("：更新子节点的优化："),(0,o.Wm)("code",null,"Vue"),(0,o.Uk)("为了避免双重循环数据量大时间复杂度升高带来的性能问题，而选择了从子节点数组中的4个特殊位置互相比对，分别是：新前与旧前，新后与旧后，新后与旧前，新前与旧后。")],-1),Y=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"原地复用"),(0,o.Uk)("："),(0,o.Wm)("strong",null,"如果是同类节点，Vue会尽可能复用DOM，尽可能不发生DOM的移动。")],-1),q=(0,o.Wm)("p",null,"函数柯里化=>通过createPatchFunction把差异化参数提前固化（不同平台调用不同createPatchFunction）",-1),G=(0,o.Wm)("h2",{id:"diff算法原理-三步",tabindex:"-1"},[(0,o.Wm)("a",{class:"header-anchor",href:"#diff算法原理-三步","aria-hidden":"true"},"#"),(0,o.Uk)(" diff算法原理（三步）")],-1),K=(0,o.Wm)("p",null,[(0,o.Uk)("通过"),(0,o.Wm)("strong",null,"同层的树节点进行比较而非对树进行逐层搜索遍历"),(0,o.Uk)("的方式，所以时间复杂度是O(n)，是非常高效的算法。")],-1),L=(0,o.Wm)("p",null,[(0,o.Uk)("一、vue 的虚拟 dom 渲染真实 dom 的过程中首先会对"),(0,o.Wm)("strong",null,"新老 VNode 的开始和结束位置进行标记"),(0,o.Uk)("：")],-1),Q=(0,o.Wm)("p",null,[(0,o.Wm)("img",{src:m,alt:"vue-vnode"})],-1),X=(0,o.Wm)("p",null,[(0,o.Uk)("二、标记好节点位置之后，就开始进入到的 while 循环处理中，这里是 diff 算法的核心流程，分情况进行了"),(0,o.Wm)("strong",null,"新老节点的比较并移动对应的 VNode 节点"),(0,o.Uk)("。while 循环的"),(0,o.Wm)("strong",null,"退出条件是直到老节点或者新节点的开始位置大于结束位置"),(0,o.Uk)("。（"),(0,o.Wm)("strong",null,"sameVnode：key、tag等属性；patchVnode为更新旧节点：检查是否含静态节点、文本、子节点等"),(0,o.Uk)("）")],-1),Z=(0,o.Wm)("p",null,"情形一：当新老 VNode 节点的 start 满足sameVnode 时，直接 patchVnode 即可，同时新老 VNode 节点的开始索引都加1。",-1),$=(0,o.Wm)("p",null,"情形二：当新老 VNode 节点的 end 满足 sameVnode 时，同样直接 patchVnode 即可，同时新老 VNode 节点的结束索引都减1。",-1),ee=(0,o.Wm)("p",null,"情形三：当老 VNode 节点的 start 和新 VNode 节点的 end 满足 sameVnode 时，这说明这次数据更新后 oldStartVnode 已经跑到了 oldEndVnode 后面去了。这时候在 patchVnode 后，还需要将当前真实 dom 节点移动到 oldEndVnode 的后面，同时老 VNode 节点开始索引加1，新 VNode 节点的结束索引减1。",-1),ne=(0,o.Wm)("p",null,"情形四：当老 VNode 节点的 end 和新 VNode 节点的 start 满足 sameVnode 时，这说明这次数据更新后 oldEndVnode 跑到了 oldStartVnode 的前面去了。这时候在 patchVnode 后，还需要将当前真实 dom 节点移动到 oldStartVnode 的前面，同时老 VNode 节点结束索引减1，新 VNode 节点的开始索引加1。",-1),le=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"如果都不满足以上四种情形，那说明没有相同的节点可以复用，"),(0,o.Uk)("，于是则通过查找事先建立好的以旧的 VNode 为 key 值，对应 index 序列为 value 值的"),(0,o.Wm)("strong",null,"哈希表"),(0,o.Uk)("。从这个哈希表中找到与 newStartVnode 一致 key 的旧的 VNode 节点，如果两者满足 sameVnode 的条件，在进行 patchVnode 的同时会将这个真实 dom 移动到 oldStartVnode 对应的真实 dom 的前面；如果没有找到，则说明当前索引下的新的 VNode 节点在旧的 VNode 队列中不存在，无法进行节点的复用，那么就只能调用 createElm 创建一个新的 dom 节点放到当前 newStartIdx 的位置。")],-1),oe=(0,o.Wm)("p",null,[(0,o.Uk)("三、当 while 循环结束后，"),(0,o.Wm)("strong",null,"根据新老节点的数目不同，做相应的节点添加或者删除"),(0,o.Uk)("。若新节点数目大于老节点则需要把多出来的节点创建出来加入到真实 dom 中，反之若老节点数目大于新节点则需要把多出来的老节点从真实 dom 中删除。至此整个 diff 过程就已经全部完成了。")],-1),de=(0,o.Wm)("h3",{id:"vue3-diff算法-双端对比的基础上改进",tabindex:"-1"},[(0,o.Wm)("a",{class:"header-anchor",href:"#vue3-diff算法-双端对比的基础上改进","aria-hidden":"true"},"#"),(0,o.Uk)(" vue3 diff算法 双端对比的基础上改进")],-1),ue=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"预处理：先从前往后比较，当节点不同时，不再往后进行比较。接着又从后往前进行比较，当节点不同时，不再往前进行比较。")],-1),ae=(0,o.Wm)("p",null,"处理相同的前后节点并判断是否仅有节点的新增或删除。",-1),me=(0,o.Wm)("p",null,[(0,o.Wm)("strong",null,"预处理过后，剩下的节点会借助最长递增子序列来提高 diff 效率。求解最长递增子序列，主要的目的就是为了减少 dom 元素的移动，也可以理解为最少的 dom 操作。")],-1),te=(0,o.Wm)("p",null,"在求解得到最长递增子序列之后，剩下的就是遍历新节点中的待处理节点，判断是否节点是否属于新增，是否需要进行移动。",-1),se={render:function(e,n){return(0,o.wg)(),(0,o.j4)(o.HY,null,[t,s,c,W,r,p,i,k,U,h,V,f,v,g,N,b,D,O,M,w,S,E,x,A,T,j,y,F,_,z,C,P,R,B,I,H,J,Y,q,G,K,L,Q,X,Z,$,ee,ne,le,oe,de,ue,ae,me,te],64)}}}}]);