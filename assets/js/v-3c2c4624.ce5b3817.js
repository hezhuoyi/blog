(self.webpackChunkblog=self.webpackChunkblog||[]).push([[884],{2944:(e,i,l)=>{"use strict";l.r(i),l.d(i,{data:()=>t});const t={key:"v-3c2c4624",path:"/Engineering/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E5%8C%96.html",title:"开发规范化",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码规范",slug:"代码规范",children:[{level:3,title:"制订代码规范",slug:"制订代码规范",children:[]},{level:3,title:"检查代码规范",slug:"检查代码规范",children:[]}]},{level:2,title:"git 规范",slug:"git-规范",children:[{level:3,title:"分支规范",slug:"分支规范",children:[]},{level:3,title:"git commit 规范",slug:"git-commit-规范",children:[]},{level:3,title:"验证 git commit 规范",slug:"验证-git-commit-规范",children:[]}]},{level:2,title:"项目规范",slug:"项目规范",children:[]},{level:2,title:"UI 规范",slug:"ui-规范",children:[]}],filePathRelative:"Engineering/开发规范化.md"}},8722:(e,i,l)=>{"use strict";l.r(i),l.d(i,{default:()=>a});const t=(0,l(6252).uE)('<h1 id="开发规范化" tabindex="-1"><a class="header-anchor" href="#开发规范化" aria-hidden="true">#</a> 开发规范化</h1><p>根本目的就是为了保证团队成员的一致性，从而减少沟通成本，提高开发效率。</p><h2 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范" aria-hidden="true">#</a> 代码规范</h2><ol><li>编写易于阅读、可维护的代码。</li><li>规范的代码可以促进团队合作</li><li>规范的代码可以降低维护成本</li><li>规范的代码有助于 code review（代码审查）</li><li>养成代码规范的习惯，有助于程序员自身的成长</li></ol><h3 id="制订代码规范" tabindex="-1"><a class="header-anchor" href="#制订代码规范" aria-hidden="true">#</a> 制订代码规范</h3><p>代码规范一般包含了代码格式规范、变量和函数命名规范、文档注释规范等等。</p><h3 id="检查代码规范" tabindex="-1"><a class="header-anchor" href="#检查代码规范" aria-hidden="true">#</a> 检查代码规范</h3><ol><li>使用工具校验代码格式。</li><li>利用 code review 审查变量命名、注释。</li></ol><h2 id="git-规范" tabindex="-1"><a class="header-anchor" href="#git-规范" aria-hidden="true">#</a> git 规范</h2><p>分支管理规范和 git commit 规范。</p><h3 id="分支规范" tabindex="-1"><a class="header-anchor" href="#分支规范" aria-hidden="true">#</a> 分支规范</h3><ol><li>开发新功能：开发新功能时，需要从 dev 上拉一个 feature-功能名称-开发姓名 分支进行开发</li><li>修改 bug：需要从有 bug 的分支（环境）上拉一个 bug-功能名称-开发姓名 分支进行修复</li><li>合并分支：在将一个分支合并到另一个分支时（例如将 feature-* 合并到 dev），需要查看自己的新分支中有没有多个重复提交或意义不明的 commit。如果有，则需要对它们进行合并（git rebase）。</li><li>部署：当 dev 分支通过测试后，就可以合并到 master 进行发布了。</li></ol><h3 id="git-commit-规范" tabindex="-1"><a class="header-anchor" href="#git-commit-规范" aria-hidden="true">#</a> git commit 规范</h3><p>git 在每次提交时，都需要填写 commit message。</p><h3 id="验证-git-commit-规范" tabindex="-1"><a class="header-anchor" href="#验证-git-commit-规范" aria-hidden="true">#</a> 验证 git commit 规范</h3><p>利用 git hook 能在特定的重要动作发生时触发自定义脚本。</p><p>验证 git commit 规范也不例外，我们需要通过 git 的 pre-commit 钩子函数来进行。当然，你还需要下载一个辅助插件 husky 来帮助你进行验证。</p><h2 id="项目规范" tabindex="-1"><a class="header-anchor" href="#项目规范" aria-hidden="true">#</a> 项目规范</h2><p>项目规范主要是指项目文件的组织方式和命名方式。统一项目规范是为了方便管理与修改，不会出现同样性质的文件出现在不同的地方。</p><p>文件、目录命名的统一</p><h2 id="ui-规范" tabindex="-1"><a class="header-anchor" href="#ui-规范" aria-hidden="true">#</a> UI 规范</h2><p>UI 规范是指项目里常用 UI 组件的表现方式以及组件的命名方式，而不是指 UI 组件如何设计。</p><p>制定 UI 规范的好处：</p><ol><li>统一页面 UI 标准，节省 UI 设计时间。</li><li>减少沟通成本，提高前端开发效率。</li></ol>',24),a={render:function(e,i){return t}}}}]);