(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6128],{8221:(e,i,l)=>{"use strict";l.r(i),l.d(i,{data:()=>a});const a={key:"v-99b2e632",path:"/Engineering/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html",title:"技术选型",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"项目因素",slug:"项目因素",children:[]},{level:3,title:"团队因素",slug:"团队因素",children:[]},{level:3,title:"技术因素",slug:"技术因素",children:[]},{level:2,title:"如何进行技术选型",slug:"如何进行技术选型",children:[]},{level:2,title:"技术选型的注意点",slug:"技术选型的注意点",children:[]}],filePathRelative:"Engineering/技术选型.md"}},942:(e,i,l)=>{"use strict";l.r(i),l.d(i,{default:()=>h});const a=(0,l(6252).uE)('<h1 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h1><h3 id="项目因素" tabindex="-1"><a class="header-anchor" href="#项目因素" aria-hidden="true">#</a> 项目因素</h3><p>明确现在项目的规模、重要程度。 项目的需求（特别是非功能性需求）也会限制技术的选型</p><h3 id="团队因素" tabindex="-1"><a class="header-anchor" href="#团队因素" aria-hidden="true">#</a> 团队因素</h3><p>考虑团队的因素，也就是人的因素，考虑团队人员的技术组成。 考虑招聘的因素，对于特别小众的技术，可能会因为招不到人而影响到对公司的业务支持。</p><h3 id="技术因素" tabindex="-1"><a class="header-anchor" href="#技术因素" aria-hidden="true">#</a> 技术因素</h3><p>技术特性考虑（易用性、可维护性、可扩展性、性能等）、技术成熟度、社区活跃度、架构匹配和演化等。 github上的star数，可以作为一个重要的参考。</p><h2 id="如何进行技术选型" tabindex="-1"><a class="header-anchor" href="#如何进行技术选型" aria-hidden="true">#</a> 如何进行技术选型</h2><ol><li>首先明确选型的需求和目的，最好能列出必须要考虑的各种因素以及评判标准。</li><li>寻找候选技术和产品。这时范围可以尽量的广一些，搜集尽可能多的候选技术和产品。</li><li>初步筛选。把一些由于各种限制无法选择或者明显不可能的技术或产品排除，筛选3个左右备选方案。</li><li>做一些详细的调查和分析。可以列个技术选型分析表</li></ol><h2 id="技术选型的注意点" tabindex="-1"><a class="header-anchor" href="#技术选型的注意点" aria-hidden="true">#</a> 技术选型的注意点</h2><ol><li>一定要进行可行性分析，如果不太确定，做个Demo验证一下，如果项目进行到一半，发现原来设想的方案不可选，那会是非常痛苦和浪费时间的事情。</li><li>不要有思维定式，也不要赶时髦。</li><li>随着业务发展，很多架构需要不断升级，所以一定要考虑未来如果替换某项技术，是否会很麻烦。可以选择一些标准技术或产品，或者在应用中部署一个适配层，方便未来适配其他技术，自由插拔。</li><li>架构应该尽可能统一，一个领域避免引入太多相同功能的技术产品。</li></ol>',11),h={render:function(e,i){return a}}}}]);