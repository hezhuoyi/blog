(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6419],{4476:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>e});const e={key:"v-3dd387e0",path:"/Engineering/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7.html",title:"前端监控",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"监控的作用",slug:"监控的作用",children:[]},{level:2,title:"数据采集",slug:"数据采集",children:[]},{level:2,title:"错误数据采集",slug:"错误数据采集",children:[]},{level:2,title:"数据上报",slug:"数据上报",children:[{level:3,title:"性能数据上报",slug:"性能数据上报",children:[]},{level:3,title:"错误数据上报",slug:"错误数据上报",children:[]}]},{level:2,title:"前端监控部署",slug:"前端监控部署",children:[]}],filePathRelative:"Engineering/前端监控.md"}},9664:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h1 id="前端监控" tabindex="-1"><a class="header-anchor" href="#前端监控" aria-hidden="true">#</a> 前端监控</h1><h2 id="监控的作用" tabindex="-1"><a class="header-anchor" href="#监控的作用" aria-hidden="true">#</a> 监控的作用</h2><p>事前预警：提前设置一个阈值，当监控的数据达到阈值时，通过短信或者邮件通知管理员。例如 API 请求数量突然间暴涨，就得进行报警，否则可能会造成服务器宕机。</p><p>事后分析：通过监控日志文件，分析故障原因和故障发生点。从而做出修改，防止这种情况再次发生。</p><h2 id="数据采集" tabindex="-1"><a class="header-anchor" href="#数据采集" aria-hidden="true">#</a> 数据采集</h2><p>性能数据采集：性能数据采集需要使用 window.performance API。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 重定向耗时</span>\nredirect<span class="token operator">:</span> timing<span class="token punctuation">.</span>redirectEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>redirectStart<span class="token punctuation">,</span>\n<span class="token comment">// DOM 渲染耗时</span>\ndom<span class="token operator">:</span> timing<span class="token punctuation">.</span>domComplete <span class="token operator">-</span> timing<span class="token punctuation">.</span>domLoading<span class="token punctuation">,</span>\n<span class="token comment">// 页面加载耗时</span>\nload<span class="token operator">:</span> timing<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>navigationStart<span class="token punctuation">,</span>\n<span class="token comment">// 页面卸载耗时</span>\nunload<span class="token operator">:</span> timing<span class="token punctuation">.</span>unloadEventEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>unloadEventStart<span class="token punctuation">,</span>\n<span class="token comment">// 请求耗时</span>\nrequest<span class="token operator">:</span> timing<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>requestStart<span class="token punctuation">,</span>\n<span class="token comment">// 获取性能信息时当前时间</span>\ntime<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token comment">// 白屏时间</span>\nwhiteScreen<span class="token operator">:</span> timing<span class="token punctuation">.</span>domLoading <span class="token operator">-</span> timing<span class="token punctuation">.</span>navigationStart\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="错误数据采集" tabindex="-1"><a class="header-anchor" href="#错误数据采集" aria-hidden="true">#</a> 错误数据采集</h2><ol><li>资源加载错误，通过 addEventListener(&#39;error&#39;, callback, true) 在捕获阶段捕捉资源加载失败错误。</li><li>js 执行错误，通过 window.onerror 捕捉 js 错误。</li><li>promise 错误，通过 addEventListener(&#39;unhandledrejection&#39;, callback)捕捉 promise 错误，但是没有发生错误的行数，列数等信息，只能手动抛出相关错误信息。</li></ol><p>通过错误收集，可以了解到网站发生错误的类型及数量，从而做出相应的调整，以减少错误发生。</p><h2 id="数据上报" tabindex="-1"><a class="header-anchor" href="#数据上报" aria-hidden="true">#</a> 数据上报</h2><h3 id="性能数据上报" tabindex="-1"><a class="header-anchor" href="#性能数据上报" aria-hidden="true">#</a> 性能数据上报</h3><p>性能数据可以在页面加载完之后上报，尽量不要对页面性能造成影响。</p><h3 id="错误数据上报" tabindex="-1"><a class="header-anchor" href="#错误数据上报" aria-hidden="true">#</a> 错误数据上报</h3><p>错误发生时上报，可以使用 navigator.sendBeacon()来进行上报。</p><p>使用 sendBeacon() 方法会使用户代理（浏览器）在有机会时异步地向服务器发送数据，同时不会延迟页面的卸载或影响下一导航的载入性能。这就解决了提交分析数据时的所有的问题：数据可靠，传输异步并且不会影响下一页面的加载。</p><h2 id="前端监控部署" tabindex="-1"><a class="header-anchor" href="#前端监控部署" aria-hidden="true">#</a> 前端监控部署</h2><p>sentry 是一个用 python 写的性能和错误监控工具，你可以使用 sentry 提供的服务（免费功能少），也可以自己部署服务。</p>',18),t={render:function(n,a){return e}}}}]);