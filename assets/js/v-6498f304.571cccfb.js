(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6910],{2536:(e,l,a)=>{"use strict";a.r(l),a.d(l,{data:()=>n});const n={key:"v-6498f304",path:"/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",title:"浏览器性能优化",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"一、浏览器层面",slug:"一、浏览器层面",children:[]},{level:3,title:"二、HTTP层面",slug:"二、http层面",children:[]},{level:3,title:"三、代码层面",slug:"三、代码层面",children:[]},{level:3,title:"四、构建层面",slug:"四、构建层面",children:[]},{level:3,title:"五、移动端首屏优化",slug:"五、移动端首屏优化",children:[]},{level:3,title:"六、服务器层面",slug:"六、服务器层面",children:[]}],filePathRelative:"Browser/浏览器性能优化.md"}},1748:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>me});var n=a(6252);const r=a.p+"assets/img/browser-GPU.15983aae.png",i=(0,n.Wm)("h1",{id:"浏览器性能优化",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#浏览器性能优化","aria-hidden":"true"},"#"),(0,n.Uk)(" 浏览器性能优化")],-1),t=(0,n.Wm)("h3",{id:"一、浏览器层面",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#一、浏览器层面","aria-hidden":"true"},"#"),(0,n.Uk)(" 一、浏览器层面")],-1),h=(0,n.Wm)("h4",{id:"突破单线程解析渲染阻塞限制-动态创建script的方式载入",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#突破单线程解析渲染阻塞限制-动态创建script的方式载入","aria-hidden":"true"},"#"),(0,n.Uk)(" 突破单线程解析渲染阻塞限制 -- 动态创建script的方式载入")],-1),d=(0,n.Wm)("p",null,[(0,n.Uk)("浏览器是一个"),(0,n.Wm)("strong",null,"单线程解析模式去解析渲染从服务器端拿到的html文本"),(0,n.Uk)("，css加载的过程中会对后续的脚本资源加载造成阻塞，脚本的加载也会阻塞后续DOM结构的解析造成页面的留白时间增长。")],-1),m=(0,n.Wm)("ul",null,[(0,n.Wm)("li",null,[(0,n.Uk)("针对不需要DOM操作（主要考虑是需要操作DOM的脚本往往需要获取一些样式信息）的Js脚本可以采用"),(0,n.Wm)("strong",null,"动态创建script的方式载入"),(0,n.Uk)("，动态载入的脚本不阻塞后续资源的加载。")]),(0,n.Wm)("li",null,"脚本文件加载可以加上defer或者async属性标识防止阻塞")],-1),s=(0,n.Wm)("h4",{id:"避开cookie性能bug-cdn部署静态资源",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#避开cookie性能bug-cdn部署静态资源","aria-hidden":"true"},"#"),(0,n.Uk)(" 避开Cookie性能bug -- CDN部署静态资源")],-1),c=(0,n.Wm)("p",null,[(0,n.Uk)("浏览器在每次都会往同域的任何资源的http请求中自动带上cookie信息的情况，这里有必要进行优化一下，因为像css、js、image这些资源请求是不需要cookie信息的，会无端"),(0,n.Wm)("strong",null,"造成请求带宽的浪费"),(0,n.Uk)("。Cookie free性能优化方案的处理方式是"),(0,n.Wm)("strong",null,"CDN异域静态资源服务器部署我们的前端css、js、image资源"),(0,n.Uk)("。")],-1),u=(0,n.Wm)("h4",{id:"突破浏览器并发连接限制-将资源划分域分开部署",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#突破浏览器并发连接限制-将资源划分域分开部署","aria-hidden":"true"},"#"),(0,n.Uk)(" 突破浏览器并发连接限制 -- 将资源划分域分开部署")],-1),W=(0,n.Wm)("p",null,[(0,n.Uk)("浏览器针对domain,而非页面page做并发连接限制的特性，domain hash的技术优化方案的处理方式是"),(0,n.Wm)("strong",null,"将资源划分域分开部署"),(0,n.Uk)("，但因为过多的域划分会增加多余的DNS开销，这里通行的数量是3个以内。")],-1),o=(0,n.Wm)("h4",{id:"配置缓存",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#配置缓存","aria-hidden":"true"},"#"),(0,n.Uk)(" 配置缓存")],-1),p=(0,n.Wm)("p",null,[(0,n.Uk)("配置缓存时要切记，浏览器在处理用户请求时，如果命中强缓存，浏览器会"),(0,n.Wm)("strong",null,"直接拉取本地缓存，不会与服务器发生任何通信"),(0,n.Uk)("，也就是说，如果我们在服务器端更新了文件，并不会被浏览器得知，就无法替换失效的缓存。所以我们在构建阶段，需要"),(0,n.Wm)("strong",null,"为我们的静态资源添加md5 hash后缀，避免资源更新而引起的前后端文件无法同步的问题。")],-1),k=(0,n.Wm)("h3",{id:"二、http层面",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#二、http层面","aria-hidden":"true"},"#"),(0,n.Uk)(" 二、HTTP层面")],-1),g=(0,n.Wm)("h4",{id:"减少http请求数量-减轻http数据请求大小",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#减少http请求数量-减轻http数据请求大小","aria-hidden":"true"},"#"),(0,n.Uk)(" 减少http请求数量 减轻http数据请求大小")],-1),U=(0,n.Wm)("h4",{id:"缓存机制",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#缓存机制","aria-hidden":"true"},"#"),(0,n.Uk)(" 缓存机制")],-1),f=(0,n.Wm)("p",null,[(0,n.Uk)("协议缓存方案：利用http缓存协议头"),(0,n.Wm)("strong",null,"cache-control"),(0,n.Uk)("做304缓存，或者更精确的"),(0,n.Wm)("strong",null,"ETAG"),(0,n.Uk)("设置依据资源的修改时间来设置缓存方案。")],-1),b=(0,n.Wm)("p",null,[(0,n.Uk)("appCache应用缓存方案：离线应用缓存是h5提供一个比较有效的离线应用方案，利用navigator.online 、window.applicationCache对象、服务器.appcache(以前是.manifest)配置文件"),(0,n.Wm)("strong",null,"保证在脱机下的移动web应用照常能用"),(0,n.Uk)("，如果要做数据的离线还要加上window.localStorage做离线数据的保存。")],-1),x=(0,n.Wm)("h4",{id:"页面切片预加载方案-对页面合理的分块-在服务器端拼接完成并吐出来",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#页面切片预加载方案-对页面合理的分块-在服务器端拼接完成并吐出来","aria-hidden":"true"},"#"),(0,n.Uk)(" 页面切片预加载方案 -- 对页面合理的分块，在服务器端拼接完成并吐出来")],-1),w=(0,n.Wm)("p",null,[(0,n.Uk)("性能优化静态资源维度最后一块内容就是针对页面，如何"),(0,n.Wm)("strong",null,"尽早输出页面模块"),(0,n.Uk)("，减少留白时间是一个思考点。facebook应用的BigPipe方案是个很不错的借鉴思想，还有淘宝也有首页做了相应的切片方案，"),(0,n.Wm)("strong",null,"对页面合理的分块，在服务器和客户端建立某种对应机制，让各个页面块并行的在服务器端拼接完成并吐出来"),(0,n.Uk)("。")],-1),C=(0,n.Wm)("h4",{id:"cdn",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#cdn","aria-hidden":"true"},"#"),(0,n.Uk)(" CDN")],-1),S=(0,n.Wm)("p",null,"用户和服务器之间距离越远，经过的路由器越多，延迟也就越高。使用CDN的目的之一便是解决这一问题，当然不仅仅如此，CDN还可以分担IDC压力。",-1),D=(0,n.Wm)("p",null,[(0,n.Wm)("strong",null,"1.便于CDN业务独立，能够独立配置缓存。")],-1),P=(0,n.Wm)("p",null,[(0,n.Wm)("strong",null,"2.抛开无用cookie，减小带宽占用。")],-1),T=(0,n.Wm)("h4",{id:"http2",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#http2","aria-hidden":"true"},"#"),(0,n.Uk)(" HTTP2")],-1),N=(0,n.Wm)("h3",{id:"三、代码层面",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#三、代码层面","aria-hidden":"true"},"#"),(0,n.Uk)(" 三、代码层面")],-1),v=(0,n.Wm)("h4",{id:"preconnet-预连接",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#preconnet-预连接","aria-hidden":"true"},"#"),(0,n.Uk)(" preconnet 预连接")],-1),y=(0,n.Wm)("p",null,"浏览器要建立一个连接，一般需要经过DNS查找，TCP三次握手和TLS协商（如果是https的话），这些过程都是需要相当的耗时的，所以preconnet，就是一项使浏览器能够预先建立一个连接，等真正需要加载资源的时候就能够直接请求了。",-1),H=(0,n.Wm)("h4",{id:"prefetch-预加载",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#prefetch-预加载","aria-hidden":"true"},"#"),(0,n.Uk)(" prefetch 预加载")],-1),E=(0,n.Wm)("p",null,"能够让浏览器预加载一个资源（HTML，JS，CSS或者图片等），可以让用户跳转到其他页面时，响应速度更快。",-1),M=(0,n.Wm)("h4",{id:"prerender-预渲染",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#prerender-预渲染","aria-hidden":"true"},"#"),(0,n.Uk)(" prerender 预渲染")],-1),j=(0,n.Wm)("p",null,"而prerender不仅会加载资源，还会解执行页面，进行预渲染，但是这都是根据浏览器自身进行判断。 浏览器可能会分配少量资源对页面进行预渲染挂起部分请求直至页面可见时可能会放弃预渲染，如果消耗资源过多等等情况。。。",-1),z=(0,n.Wm)("h4",{id:"内联首屏关键css-critical-css",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#内联首屏关键css-critical-css","aria-hidden":"true"},"#"),(0,n.Uk)(" 内联首屏关键CSS（Critical CSS）")],-1),B=(0,n.Wm)("p",null,[(0,n.Uk)("性能优化中有一个重要的指标——"),(0,n.Wm)("strong",null,"首次有效绘制"),(0,n.Uk)("（First Meaningful Paint，简称"),(0,n.Wm)("strong",null,"FMP"),(0,n.Uk)("）即指 "),(0,n.Wm)("strong",null,"页面的首要内容出现在屏幕上的时间。"),(0,n.Uk)(" 这一指标影响用户看到页面前所需等待的时间，而 "),(0,n.Wm)("strong",null,"内联首屏关键CSS"),(0,n.Uk)("能减少这一时间。")],-1),J=(0,n.Wm)("p",null,[(0,n.Uk)("我们应当"),(0,n.Wm)("strong",null,"只将渲染首屏内容所需的关键CSS内联到HTML中"),(0,n.Uk)("。")],-1),A=(0,n.Wm)("h4",{id:"异步加载css",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#异步加载css","aria-hidden":"true"},"#"),(0,n.Uk)(" 异步加载CSS")],-1),F=(0,n.Wm)("p",null,[(0,n.Wm)("strong",null,"JavaScript动态创建link标签")],-1),G=(0,n.Wm)("p",null,[(0,n.Wm)("strong",null,'rel="preload"'),(0,n.Uk)(" 异步加载资源")],-1),L=(0,n.Wm)("h4",{id:"利用gpu硬件加速浏览器渲染-will-change-transform-opacity",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#利用gpu硬件加速浏览器渲染-will-change-transform-opacity","aria-hidden":"true"},"#"),(0,n.Uk)(" 利用GPU硬件加速浏览器渲染(will-change: transform, opacity;)")],-1),O=(0,n.Wm)("p",null,[(0,n.Uk)("在页面中创建一个新的渲染层最好的方式就是使用CSS属性"),(0,n.Wm)("strong",null,"will-change"),(0,n.Uk)("，对于目前还不支持will-change属性、但支持创建渲染层的浏览器，可以通过"),(0,n.Wm)("strong",null,"3D transform属性来强制浏览器创建一个新的渲染层"),(0,n.Uk)("。需要注意的是，不要创建过多的渲染层，这意味着新的内存分配和更复杂的层管理。")],-1),I=(0,n.Wm)("p",null,[(0,n.Wm)("img",{src:r,alt:"GPU"})],-1),R=(0,n.Wm)("h4",{id:"减少回流和重绘",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#减少回流和重绘","aria-hidden":"true"},"#"),(0,n.Uk)(" 减少回流和重绘")],-1),Y=(0,n.Wm)("p",null,[(0,n.Uk)("使用"),(0,n.Wm)("code",null,"createDocumentFragment"),(0,n.Uk)("进行"),(0,n.Wm)("strong",null,"批量的 DOM 操作"),(0,n.Uk)("。")],-1),q=(0,n.Wm)("p",null,[(0,n.Wm)("strong",null,"让要操作的元素进行”离线处理”，处理完后一起更新"),(0,n.Uk)("：display:none cloneNode和 replaceChild")],-1),K=(0,n.Wm)("p",null,[(0,n.Uk)("添加 "),(0,n.Wm)("strong",null,"will-change: tranform"),(0,n.Uk)(" ，让渲染引擎为其单独实现一个图层，当这些变换发生时，仅仅只是利用合成线程去处理这些变换，而不牵扯到主线程，大大提高渲染效率。")],-1),Q=(0,n.Wm)("h3",{id:"四、构建层面",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#四、构建层面","aria-hidden":"true"},"#"),(0,n.Uk)(" 四、构建层面")],-1),V=(0,n.Wm)("h4",{id:"html压缩-htmlwebpackplugin",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#html压缩-htmlwebpackplugin","aria-hidden":"true"},"#"),(0,n.Uk)(" html压缩 ：HtmlWebpackPlugin")],-1),X=(0,n.Wm)("p",null,"作用：",-1),Z=(0,n.Wm)("ul",null,[(0,n.Wm)("li",null,[(0,n.Uk)("为html文件中引入的外部资源如script、link动态添加每次compile后的hash，"),(0,n.Wm)("strong",null,"防止引用缓存的外部文件问题")]),(0,n.Wm)("li",null,[(0,n.Uk)("可以"),(0,n.Wm)("strong",null,"生成创建html入口文件"),(0,n.Uk)("，比如单页面可以生成一个html文件入口，配置"),(0,n.Wm)("strong",null,"N"),(0,n.Uk)("个"),(0,n.Wm)("code",null,"html-webpack-plugin"),(0,n.Uk)("可以生成"),(0,n.Wm)("strong",null,"N"),(0,n.Uk)("个页面入口")])],-1),$=(0,n.Wm)("h4",{id:"提取css并压缩-extract-text-webpack-plugin",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#提取css并压缩-extract-text-webpack-plugin","aria-hidden":"true"},"#"),(0,n.Uk)(" 提取css并压缩：extract-text-webpack-plugin")],-1),_=(0,n.Wm)("h4",{id:"js压缩-new-webpack-optimize-uglifyjsplugin",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#js压缩-new-webpack-optimize-uglifyjsplugin","aria-hidden":"true"},"#"),(0,n.Uk)(" JS压缩：new webpack.optimize.UglifyJsPlugin()")],-1),ee=(0,n.Wm)("h4",{id:"代码分割-提取公共资源-tree-shaking-图片压缩-雪碧图",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#代码分割-提取公共资源-tree-shaking-图片压缩-雪碧图","aria-hidden":"true"},"#"),(0,n.Uk)(" 代码分割 提取公共资源 Tree-shaking 图片压缩 雪碧图")],-1),le=(0,n.Wm)("h3",{id:"五、移动端首屏优化",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#五、移动端首屏优化","aria-hidden":"true"},"#"),(0,n.Uk)(" 五、移动端首屏优化")],-1),ae=(0,n.Wm)("p",null,"常规的前端和后端的性能优化在桌面时代已经有最佳实践，主要的是：",-1),ne=(0,n.Wm)("ul",null,[(0,n.Wm)("li",null,"降低请求量：合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。"),(0,n.Wm)("li",null,"加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。"),(0,n.Wm)("li",null,"缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存localStorage。"),(0,n.Wm)("li",null,"渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline。")],-1),re=(0,n.Wm)("h3",{id:"六、服务器层面",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#六、服务器层面","aria-hidden":"true"},"#"),(0,n.Uk)(" 六、服务器层面")],-1),ie=(0,n.Wm)("p",null,[(0,n.Wm)("strong",null,"服务器开启gzip压缩")],-1),te=(0,n.Wm)("p",null,[(0,n.Uk)("Nginx可以通过"),(0,n.Wm)("strong",null,"反向代理"),(0,n.Uk)("来实现"),(0,n.Wm)("strong",null,"负载均衡。")],-1),he=(0,n.Wm)("p",null,"Nginx解决跨域：作为反向代理服务器，就是把http请求转发到另一个或者一些服务器上。通过把本地一个url前缀映射到要跨域访问的web服务器上，就可以实现跨域访问。",-1),de=(0,n.Wm)("p",null,"它的作用便是能够将用户的请求分配到压力较小的服务器上，其机制是轮询。以轮询方式将请求分配到不同服务器上。",-1),me={render:function(e,l){return(0,n.wg)(),(0,n.j4)(n.HY,null,[i,t,h,d,m,s,c,u,W,o,p,k,g,U,f,b,x,w,C,S,D,P,T,N,v,y,H,E,M,j,z,B,J,A,F,G,L,O,I,R,Y,q,K,Q,V,X,Z,$,_,ee,le,ae,ne,re,ie,te,he,de],64)}}}}]);