(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2305],{3242:(e,t,r)=>{"use strict";r.r(t),r.d(t,{data:()=>a});const a={key:"v-641fd66a",path:"/Framework/Flutter/UI%E7%B3%BB%E7%BB%9F.html",title:"UI系统",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"硬件绘图基本原理",slug:"硬件绘图基本原理",children:[]},{level:2,title:"Flutter UI系统",slug:"flutter-ui系统",children:[]}],filePathRelative:"Framework/Flutter/UI系统.md"}},222:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});const a=(0,r(6252).uE)('<h1 id="ui系统" tabindex="-1"><a class="header-anchor" href="#ui系统" aria-hidden="true">#</a> UI系统</h1><h2 id="硬件绘图基本原理" tabindex="-1"><a class="header-anchor" href="#硬件绘图基本原理" aria-hidden="true">#</a> 硬件绘图基本原理</h2><p>提到原理，我们要从屏幕显示图像的基本原理谈起。我们知道显示器（屏幕）是由一个个物理显示单元组成，每一个单元我们可以称之为一个物理像素点，而每一个像素点可以发出多种颜色，显示器成相的原理就是在不同的物理像素点上显示不同的颜色，最终构成完整的图像。</p><p>一个像素点能发出的所有颜色总数是显示器的一个重要指标，比如我们所说的1600万色的屏幕就是指一个像素点可以显示出1600万种颜色，而显示器颜色是有RGB三基色组成，所以1600万即2的24次方，即每个基本色（R、G、B）深度扩展至8 bit(位)，颜色深度越深，所能显示的色彩更加丰富靓丽。</p><p>为了更新显示画面，显示器是以固定的频率刷新（从GPU取数据），比如有一部手机屏幕的刷新频率是 60Hz。当一帧图像绘制完毕后准备绘制下一帧时，显示器会发出一个垂直同步信号（如VSync）， 60Hz的屏幕就会一秒内发出 60次这样的信号。而这个信号主要是用于同步CPU、GPU和显示器的。一般地来说，计算机系统中，CPU、GPU和显示器以一种特定的方式协作：CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照同步信号从帧缓冲区取帧数据传递给显示器显示。</p><p>CPU和GPU的任务是各有偏重的，CPU主要用于基本数学和逻辑计算，而GPU主要执行和图形处理相关的复杂的数学，如矩阵变化和几何计算，GPU的主要作用就是确定最终输送给显示器的各个像素点的色值。</p><h2 id="flutter-ui系统" tabindex="-1"><a class="header-anchor" href="#flutter-ui系统" aria-hidden="true">#</a> Flutter UI系统</h2><p>我们可以看到，无论是Android SDK还是iOS的UIKit 的职责都是相同的，它们只是语言载体和底层的系统不同而已。那么可不可以实现这么一个UI系统：可以使用同一种编程语言开发，然后针对不同操作系统API抽象一个对上接口一致，对下适配不同操作系统的的中间层，然后在打包编译时再使用相应的中间层代码？如果可以做到，那么我们就可以使用同一套代码编写跨平台的应用了。而Flutter的原理正是如此，<strong>它提供了一套Dart API，然后在底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生</strong>。</p>',8),i={render:function(e,t){return a}}}}]);