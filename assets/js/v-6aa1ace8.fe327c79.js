(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4568],{8997:(e,l,r)=>{"use strict";r.r(l),r.d(l,{data:()=>t});const t={key:"v-6aa1ace8",path:"/Framework/TypeScript/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3TS.html",title:"深入理解TS",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"TS编译原理",slug:"ts编译原理",children:[{level:3,title:"工作流",slug:"工作流",children:[]}]}],filePathRelative:"Framework/TypeScript/深入理解TS.md"}},2106:(e,l,r)=>{"use strict";r.r(l),r.d(l,{default:()=>h});var t=r(6252);const a=r.p+"assets/img/ts-compiler.a9690158.jpg",n=(0,t.Wm)("h1",{id:"深入理解ts",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#深入理解ts","aria-hidden":"true"},"#"),(0,t.Uk)(" 深入理解TS")],-1),i=(0,t.Wm)("h2",{id:"ts编译原理",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#ts编译原理","aria-hidden":"true"},"#"),(0,t.Uk)(" TS编译原理")],-1),s=(0,t.Wm)("p",null,"TypeScript 编译器由几个关键部分组成： Scanner 扫描器（scanner.ts） Parser 解析器（parser.ts） Binder 绑定器（binder.ts） Checker 检查器（checker.ts） Emitter 发射器（emitter.ts）",-1),c=(0,t.Wm)("p",null,"先借用网上一张图，看看各部分怎么组合起来的。",-1),m=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:a,alt:""})],-1),p=(0,t.Wm)("h3",{id:"工作流",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#工作流","aria-hidden":"true"},"#"),(0,t.Uk)(" 工作流")],-1),u=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,[(0,t.Wm)("p",null,"解析器创建扫描器来将源码转化为抽象语法树(AST)。 首先对于SourceCode（源码） 通过 扫描器进行词法分析可以得到一组 Token 流，随后解析器进行语法分析得到 AST")]),(0,t.Wm)("li",null,[(0,t.Wm)("p",null,"为了协助（检查器执行）类型检查，绑定器将源码的各部分连接成一个相关的类型系统，供检查器使用。绑定器的主要职责是解析作用域，创建符号表。 符号（Symbol）是 TypeScript 语义系统的主要构造块。符号是绑定的结果。符号将 AST 中的声明节点与相同实体的其他声明相连。")]),(0,t.Wm)("li",null,[(0,t.Wm)("p",null,"检查器是 TS 不同于其他JavaScript转译器的重要部分，负责语义分析检查相关类型错误。")]),(0,t.Wm)("li",null,[(0,t.Wm)("p",null,"转换器在编译成 JavaScript 之前会将语法进行转换成 ESNext 的语法，再替换掉旧版本不支持的语法，最后得到标准的 JavaScript 语法树。发射器负责生成代码，也就是将语法树重新拼装回代码，并保存到文件。")])],-1),d=(0,t.Wm)("p",null,"TypeScript 还会同时生成源映射（Source Map），以及类型描述文件（.d.ts）。",-1),h={render:function(e,l){return(0,t.wg)(),(0,t.j4)(t.HY,null,[n,i,s,c,m,p,u,d],64)}}}}]);