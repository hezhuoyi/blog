(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4768],{9277:(e,l,n)=>{"use strict";n.r(l),n.d(l,{data:()=>t});const t={key:"v-30c32f3e",path:"/JavaScript/JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.html",title:"JS执行机制",lang:"zh-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"JS事件循环",slug:"js事件循环",children:[]},{level:2,title:"宏任务与微任务",slug:"宏任务与微任务",children:[]},{level:2,title:"NodeJs中的事件循环",slug:"nodejs中的事件循环",children:[{level:3,title:"timers 阶段",slug:"timers-阶段",children:[]},{level:3,title:"poll 阶段",slug:"poll-阶段",children:[]},{level:3,title:"check 阶段",slug:"check-阶段",children:[]},{level:3,title:"小结",slug:"小结",children:[]},{level:3,title:"Node.js 与浏览器的 Event Loop 差异",slug:"node-js-与浏览器的-event-loop-差异",children:[]}]}],filePathRelative:"JavaScript/JS执行机制.md"}},7358:(e,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>B});var t=n(6252);const s=n.p+"assets/img/js-执行机制.d922bb47.jpeg",i=n.p+"assets/img/js-Task.f0fd58f8.jpeg",a=n.p+"assets/img/node-eventloop.eaba9c0e.png",m=(0,t.Wm)("h1",{id:"js执行机制",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#js执行机制","aria-hidden":"true"},"#"),(0,t.Uk)(" JS执行机制")],-1),o=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"JavaScript是一门单线程语言")],-1),r=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"Event Loop是javascript的执行机制")],-1),u=(0,t.Wm)("h2",{id:"js事件循环",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#js事件循环","aria-hidden":"true"},"#"),(0,t.Uk)(" JS事件循环")],-1),d=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:s,alt:"JS执行机制"})],-1),c=(0,t.Wm)("p",null,"导图要表达的内容用文字来表述的话：",-1),h=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,'同步和异步任务分别进入不同的执行"场所"，同步的进入主线程，异步的进入Event Table并注册函数。')]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"当指定的事情完成时，Event Table会将这个函数移入Event Queue。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"上述过程会不断重复，也就是常说的Event Loop(事件循环)。")])],-1),W=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。")],-1),p=(0,t.Wm)("h2",{id:"宏任务与微任务",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#宏任务与微任务","aria-hidden":"true"},"#"),(0,t.Uk)(" 宏任务与微任务")],-1),v=(0,t.Wm)("p",null,"macro-task(宏任务)：包括整体代码script，setTimeout，setInterval，requestAnimationFrame，MessageChannel，postMessage，UI rendering/UI事件，setImmediate(Node.js)",-1),k=(0,t.Wm)("p",null,"micro-task(微任务)：Promise.then，MutationObserver，process.nextTick(Node.js)",-1),g=(0,t.Wm)("p",null,"不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。",-1),j=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:i,alt:"JSTask"})],-1),b=(0,t.Wm)("h2",{id:"nodejs中的事件循环",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#nodejs中的事件循环","aria-hidden":"true"},"#"),(0,t.Uk)(" NodeJs中的事件循环")],-1),f=(0,t.Wm)("p",null,"Node.js采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。",-1),I=(0,t.Wm)("p",null,"（nodejs的的事件循环由libuv的uv_run函数实现。在该函数中执行while循环，然后处理各种阶段（phase）的事件回调。事件循环的处理相当于一个消费者，消费由各业务代码生产的任务。）",-1),E=(0,t.Wm)("p",null,[(0,t.Wm)("img",{src:a,alt:"NodeJs中的事件循环"})],-1),U=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"timers阶段"),(0,t.Uk)("：这个阶段执行timer（setTimeout、setInterval）的回调")]),(0,t.Wm)("li",null,"I/O callbacks：执行延迟到下一个循环迭代的 I/O 回调"),(0,t.Wm)("li",null,"idle,prepare：仅node内部使用（自定义的一些任务）"),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"poll"),(0,t.Uk)("（轮询）：处理网络io、文件io的地方，获取新的I/O事件, 适当的条件下node将阻塞在这里")]),(0,t.Wm)("li",null,[(0,t.Wm)("strong",null,"check"),(0,t.Uk)("：执行 setImmediate() 的回调")]),(0,t.Wm)("li",null,"close callbacks：执行 socket 的 close 事件回调")],-1),J=(0,t.Wm)("h3",{id:"timers-阶段",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#timers-阶段","aria-hidden":"true"},"#"),(0,t.Uk)(" timers 阶段")],-1),N=(0,t.Wm)("p",null,"timers 是事件循环的第一个阶段，Node 会去检查有无已过期的timer，如果有则把它的回调压入timer的任务队列中等待执行，事实上，Node 并不能保证timer在预设时间到了就会立即执行，因为Node对timer的过期检查不一定靠谱，它会受机器上其它运行程序影响，或者那个时间点主线程不空闲。",-1),x=(0,t.Wm)("h3",{id:"poll-阶段",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#poll-阶段","aria-hidden":"true"},"#"),(0,t.Uk)(" poll 阶段")],-1),S=(0,t.Wm)("p",null,"poll 阶段主要有2个功能：",-1),T=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,"处理 poll 队列的事件"),(0,t.Wm)("li",null,"当有已超时的 timer，执行它的回调函数")],-1),O=(0,t.Wm)("p",null,"event loop将同步执行poll队列里的回调，直到队列为空或执行的回调达到系统上限（上限具体多少未详），接下来event loop会去检查有无预设的setImmediate()，分两种情况：",-1),A=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,"若有预设的setImmediate(), event loop将结束poll阶段进入check阶段，并执行check阶段的任务队列"),(0,t.Wm)("li",null,"若没有预设的setImmediate()，event loop将阻塞在该阶段等待")],-1),C=(0,t.Wm)("h3",{id:"check-阶段",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#check-阶段","aria-hidden":"true"},"#"),(0,t.Uk)(" check 阶段")],-1),Q=(0,t.Wm)("p",null,"setImmediate()的回调会被加入check队列中， 从event loop的阶段图可以知道，check阶段的执行顺序在poll阶段之后。",-1),w=(0,t.Wm)("h3",{id:"小结",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),(0,t.Uk)(" 小结")],-1),L=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,"event loop 的每个阶段都有一个任务队列"),(0,t.Wm)("li",null,"当 event loop 到达某个阶段时，将执行该阶段的任务队列，直到队列清空或执行的回调达到系统上限后，才会转入下一个阶段"),(0,t.Wm)("li",null,"当所有阶段被顺序执行一次后，称 event loop 完成了一个 tick")],-1),M=(0,t.Wm)("h3",{id:"node-js-与浏览器的-event-loop-差异",tabindex:"-1"},[(0,t.Wm)("a",{class:"header-anchor",href:"#node-js-与浏览器的-event-loop-差异","aria-hidden":"true"},"#"),(0,t.Uk)(" Node.js 与浏览器的 Event Loop 差异")],-1),P=(0,t.Wm)("ol",null,[(0,t.Wm)("li",null,"Node.js 的事件循环分为6个阶段"),(0,t.Wm)("li",null,"浏览器和Node 环境下，microtask 任务队列的执行时机不同： Node.js中，microtask 在事件循环的各个阶段之间执行； 浏览器端，microtask 在事件循环的 macrotask 执行完之后执行"),(0,t.Wm)("li",null,"递归的调用process.nextTick()会导致I/O starving，官方推荐使用setImmediate()")],-1),B={render:function(e,l){return(0,t.wg)(),(0,t.j4)(t.HY,null,[m,o,r,u,d,c,h,W,p,v,k,g,j,b,f,I,E,U,J,N,x,S,T,O,A,C,Q,w,L,M,P],64)}}}}]);